# @alsoload /Users/wvw/git/n3/eye-js/explain/test/yellow1-proof.n3

@prefix dc: <http://purl.org/dc/terms/> .
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#> .
@prefix graph: <http://www.w3.org/2000/10/swap/graph#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix n3: <http://www.w3.org/2004/06/rei#> .
@prefix pml: <http://provenanceweb.org/ns/pml#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix r: <http://www.w3.org/2000/10/swap/reason#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix x: <http://wvw.org/xai#> .
@prefix xmath: <http://wvw.org/xai/swap/math#> .
@base <http://wvw.org/xai#> .


# any inference is a node
# (ignore "top-level lemmas", i.e., inferences that prove the query)
{
   ?x!r:component!r:evidence list:member ?i .
}
=> 
{
   ?i a x:Node 
} .

# propagate x:Node
{
   ?parent a x:Node .
   ?parent!r:evidence list:member ?i .
   ?i a r:Inference .
}
=> 
{
   ?i a x:Node 
} .


# facts & extractions are leafs
{
   ?x!rdf:type list:in ( r:Fact r:Extraction ) .
   # (make sure they're relevant to an inference)
   ?y!r:evidence list:member ?x 
}
=> 
{
   ?x a x:Leaf 
} .


# root-nodes = lemmas used only by "top-level lemmas"
{
   ?x!r:component!r:evidence list:member ?i .
   # not used elsewhere as evidence
   (
       ?y
       {
           ?y a x:Node .
           ?y!r:evidence list:member ?i 
       }
       ( )
   ) log:collectAllIn _:t .
}
=> 
{
   ?i a x:RootNode 
} .


# TODO find a way to avoid the same (expensive) check twice
# or shenanigans like "_:t log:notIncludes { ?n x:evidence .. }"

#
{
   ?n x:intermEvidence ?support .
   ?n x:mergeGives ?f .
   ?f log:includes 
   {
       ?y math:greaterThan ?a .
       ?y math:lessThan ?b .
   } .
   # "T1" log:trace ( ?n ?f ) .
}
=> 
{
   _:b1 a x:Leaf ;
       x:gives ?f .
   ?n x:evidence ( _:b1 ) 
} .


#
{
   ?n x:intermEvidence ?support .
   ?n x:mergeGives ?f .
   ?f log:notIncludes 
   {
       ?y math:greaterThan ?a .
       ?y math:lessThan ?b .
   } .
   # "T2" log:trace ( ?n ?f ) .
}
=> 
{
   ?n x:evidence ?support 
} .


#
{
   ?n x:mergeGives ?f 
}
<= 
{
   ?n x:intermEvidence ?support .
   (
       ?t
       {
           ?support list:member ?m .
           ?m x:gives ?t 
       }
       ?ts
   ) log:collectAllIn _:t .
   ?ts log:conjunction ?f .
} .
