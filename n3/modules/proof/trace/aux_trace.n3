# @abstract
# @involves 'n3/modules/aux.n3'
# @requires x:intermEvidence , 'n3/ontology/Proof.n3' , x:isComparator , x:isLEComparator , x:isGEComparator , 'n3/ontology/Proof.n3'
# @provides x:Node , x:Leaf, x:RootNode, x:gives , x:evidence

@prefix dc: <http://purl.org/dc/terms/> .
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#> .
@prefix graph: <http://www.w3.org/2000/10/swap/graph#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix n3: <http://www.w3.org/2004/06/rei#> .
@prefix pml: <http://provenanceweb.org/ns/pml#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix r: <http://www.w3.org/2000/10/swap/reason#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix x: <http://wvw.org/xai#> .
@prefix xmath: <http://wvw.org/xai/swap/math#> .
@base <http://wvw.org/xai#> .


# any inference is a node
# (ignore "top-level lemmas", i.e., inferences that prove the query)
{
   ?x!r:component!r:evidence list:member ?i .
}
=> 
{
   ?i a x:Node 
} .

# propagate x:Node
{
   ?parent a x:Node .
   ?parent!r:evidence list:member ?i .
   ?i a r:Inference .
}
=> 
{
   ?i a x:Node 
} .


# facts & extractions are leafs
{
   ?x!rdf:type list:in ( r:Fact r:Extraction ) .
   # (make sure they're relevant to an inference)
   ?y!r:evidence list:member ?x 
}
=> 
{
   ?x a x:Leaf 
} .


# root-nodes = lemmas used only by "top-level lemmas"
{
   ?x!r:component!r:evidence list:member ?i .
   # not used elsewhere as evidence
   (
       ?y
       {
           ?y a x:Node .
           ?y!r:evidence list:member ?i 
       }
       ( )
   ) log:collectAllIn _:t .
}
=> 
{
   ?i a x:RootNode 
} .

#
{
   ?x a x:RootNode .
   ( ?x ) x:getNodeEvidence ( ( ) ?local ( ) ?all ) .
   ( ?node ?gives ?evidence ) list:in ?all .
   "emit" log:trace ( ?node ?evidence ) .
}
=> 
{
   ?x :blah ?all .
   ?node x:gives ?gives ;
       x:evidence ?evidence 
} .

#
{
   ?list x:getNodeEvidence ( ?local ?local2 ?all ?all2 ) 
}
<= 
{
   ?list list:firstRest ( ?x ?rest ) .
   #
   ?x x:getNode ( ?x2 ?gives2 ) .
   #
   ?x x:childrenEvidence ( ( ) ?myLocal ?all ?myAll ) .
   ( ?myAll ( ( ?x2 ?gives2 ?myLocal ) ) ) list:append ?all1 .
   ( ?local ( ?x2 ) ) list:append ?local1 .
   #
   ?rest x:getNodeEvidence ( ?local1 ?local2 ?all1 ?all2 ) 
} .

#
{
   ?x x:childrenEvidence ( ?local ?myLocal ?all ?myAll ) 
}
<= 
{
   ?x x:intermEvidence ?children .
   ?children x:getNodeEvidence ( ?local ?myLocal ?all ?myAll ) 
} .

#
{
   ?x x:childrenEvidence ( ?local ?local ?all ?all ) 
}
<= 
{
   ?x a x:Leaf .
} .

#
{
   ( ) x:getNodeEvidence ( ?local ?local ?all ?all ) 
}
<= {} .

#
{
   ?x x:getNode ( ?x ?f ) 
}
<= 
{
   ?x!x:intermEvidence x:getComparisons ( ) .
   ?x r:gives ?f .
} .

#
{
   ?x x:getNode ( ?x ?f ) 
}
<= 
{
   ?x a x:Leaf ;
       r:gives ?f .
} .

#
{
   ?x x:getNode ( ?n ?f ) 
}
<= 
{
   ?x x:intermEvidence ?support .
   ?support x:getComparisons ?cmp .
   ?cmp!list:length math:greaterThan 0 .
   #
   ?support x:mergeAllGives ?f .
   ( ?x ) log:skolem ?n .
} .


#
{
   ?support x:getComparisons ?cmps 
}
<= 
{
   (
       ?p
       {
           ?support!list:member!x:gives log:includes 
           {
               ?x ?p ?y 
           } .
           ?p x:isComparator true 
       }
       ?cmps
   ) log:collectAllIn _:t .
} .

#
{
   ?support x:mergeAllGives ?f 
}
<= 
{
   (
       ?t
       {
           ?support list:member ?m .
           ?m r:gives ?t 
       }
       ?ts
   ) log:collectAllIn _:t .
   ?ts log:conjunction ?f .
} .
