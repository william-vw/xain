# @abstract
# @involves 'n3/modules/aux.n3'
# @requires x:intermEvidence , 'n3/ontology/Proof.n3' , x:isComparator , x:isLEComparator , x:isGEComparator , 'n3/ontology/Proof.n3'
# @provides x:Node , x:Leaf, x:RootNode, x:gives , x:evidence

@prefix dc: <http://purl.org/dc/terms/> .
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#> .
@prefix graph: <http://www.w3.org/2000/10/swap/graph#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix n3: <http://www.w3.org/2004/06/rei#> .
@prefix pml: <http://provenanceweb.org/ns/pml#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix r: <http://www.w3.org/2000/10/swap/reason#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix x: <http://wvw.org/xai#> .
@prefix xmath: <http://wvw.org/xai/swap/math#> .
@base <http://wvw.org/xai#> .


# any inference is a node
# (ignore "top-level lemmas", i.e., inferences that prove the query)
{
   ?x!r:component!r:evidence list:member ?i .
}
=> 
{
   ?i a x:Node 
} .

# propagate x:Node
{
   ?parent a x:Node .
   ?parent!r:evidence list:member ?i .
   ?i a r:Inference .
}
=> 
{
   ?i a x:Node 
} .


# facts & extractions are leafs
{
   ?x!rdf:type list:in ( r:Fact r:Extraction ) .
   # (make sure they're relevant to an inference)
   ?y!r:evidence list:member ?x 
}
=> 
{
   ?x a x:Leaf 
} .


# root-nodes = lemmas used only by "top-level lemmas"
{
   ?x!r:component!r:evidence list:member ?i .
   # not used elsewhere as evidence
   (
       ?y
       {
           ?y a x:Node .
           ?y!r:evidence list:member ?i 
       }
       ( )
   ) log:collectAllIn _:t .
}
=> 
{
   ?i a x:RootNode 
} .

#
{
   ?x a x:RootNode .
   # collect nodes, any extra triples, and their evidence
   ?x x:recurseRoot ?all .
   # "all" log:trace ?all .
   # for each cell in 'all', output relevant triples
   ( ?node ?extra ?evidence ) list:in ?all .
   ?extra log:includes 
   {
       ?s ?p ?o 
   } .
   # "out" log:trace ( ?node ?extra ?evidence )
}
=> 
{
   ?node x:evidence ?evidence .
   ?s ?p ?o .
} .

# recurse over node tree starting from root
{
   ?x x:recurseRoot ?all 
}
<= 
{
   ?x x:gives ?gives ;
       x:intermEvidence ?children .
   #
   ( ( ?x ?gives ?children ) ) x:recurseNodeTree ( ( ) ?all ) .
} .

# recurse over node tree & perform some action
# in this case, merge child nodes if needed
{
   ?cells x:recurseNodeTree ( ?all ?all2 ) 
}
<= 
{
   ?cells list:firstRest ( ( ?x ?gives ?children ) ?rest ) .
   "x" log:trace ( ( ?x ?gives ?children ) ?all ) .

   # may be needed to merge child nodes (if they contain comparisons)
   # (if so, their own children should all be considered children of the merged node)
   #     newChildren: new set of children
   #     childCells: each child with their 'extra' triples (if any) and own current set of children
   #
   ( ?x ?children ) x:processChildNodes ( ?newChildren ?childCells ) .
   "children" log:trace ( ?x ?children ?newChildren ?childCells ) .
   
   # add new cell to "all" list with updated children
   ( ?all ( ( ?x ?gives ?newChildren ) ) ) list:append ?all11 .
   
   # now, go over each child cell with their current set of children
   ?childCells x:recurseNodeTree ( ?all11 ?all12 ) .
   
   # finally, go over rest of the given list of cells
   ?rest x:recurseNodeTree ( ?all12 ?all2 ) 
} .

# if no more elements in list of cells, copy current 'all' to output 'all'
{
   ( ) x:recurseNodeTree ( ?all ?all ) 
}
<= {} .


# children do not need to be merged
# subject: input; object: output
# (in this case, input children are same as output children)
{
   ( ?x ?children ) x:processChildNodes ( ?children ?childCells ) 
}
<= 
{
   ?children x:getComparisons ( ) .
   #
   (
       (
           ?m
           {
               true true true 
           }
           ?e
       )
       {
           ?children list:member ?m .
           ?m x:intermEvidence ?e 
       }
       ?childCells
   ) log:collectAllIn _:t .
} .

# no children
{
   ( ?x ( ) ) x:processChildNodes ( ( ) ( ) ) 
}
<= {} .

# children should be merged
# subject: input; object: output
{
   ( ?x ?children ) x:processChildNodes (
       # (new child node)
       ( ?n )
       (
           (
               # (new child node, merged gives, & merged children)
               ?n
               {
                   ?n a x:Node ;
                       x:gives ?mergedGives 
               }
               ?mergedChildren
           )
       )
   ) 
}
<= 
{
   ?children!x:getComparisons!list:length math:greaterThan 0 .
   #
   ( ?x ) log:skolem ?n .
   #
   (
       ?f
       {
           ?children!list:member r:gives ?f 
       }
       ?fs
   ) log:collectAllIn _:t .
   ?fs log:conjunction ?mergedGives .
   #
   (
       ?e
       {
           ?children!list:member x:intermEvidence ?e .
       }
       ?es
   ) log:collectAllIn _:t .
   ?es list:append ?mergedChildren .
} .


#
{
   ?support x:getComparisons ?cmps 
}
<= 
{
   (
       ?p
       {
           ?support!list:member!x:gives log:includes 
           {
               ?x ?p ?y 
           } .
           ?p x:isComparator true 
       }
       ?cmps
   ) log:collectAllIn _:t .
} .

#
{
   ?support x:mergeAllGives ?f 
}
<= 
{
   (
       ?t
       {
           ?support list:member ?m .
           ?m r:gives ?t 
       }
       ?ts
   ) log:collectAllIn _:t .
   ?ts log:conjunction ?f .
} .
