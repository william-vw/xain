# @concrete
# @involves "n3/modules/proof/trace/aux_trace.n3"
# @requires x:aggrGives , x:aggrEvidence , 'n3/ontology/Proof.n3'
# @provides x:intermEvidence , x:gives

@prefix dc: <http://purl.org/dc/terms/> .
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#> .
@prefix graph: <http://www.w3.org/2000/10/swap/graph#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix n3: <http://www.w3.org/2004/06/rei#> .
@prefix pml: <http://provenanceweb.org/ns/pml#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix r: <http://www.w3.org/2000/10/swap/reason#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix x: <http://wvw.org/xai#> .
@base <http://wvw.org/xai#> .


# TODO
# try changing these rules to backward

#
{
   ?n a x:Node ;
       x:aggrGives ?gives 
}
=>
{
   ?n x:gives ?gives 
} .


#
{
   ?n!rdf:type list:in ( r:Fact r:Extraction ) .
   ?n r:gives ?gives 
}
=>
{
   ?n x:gives ?gives 
} .


#
{
   ?n x:aggrEvidence ?support 
}
=>
{
   ?n x:intermEvidence ?support 
} .