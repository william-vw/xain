@prefix dc: <http://purl.org/dc/terms/> .
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix pml: <http://provenanceweb.org/ns/pml#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix r: <http://www.w3.org/2000/10/swap/reason#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix x: <http://wvw.org/xai#> .
@base <http://wvw.org/xai#> .

#
{
   (
       ?root
       {
           ?root a x:RootNode .
           ?root!x:gives!e:labelvars log:includes 
           {
               ?s ?p ?o 
           } .
           ?p a x:RecommendationProperty 
       }
       ?roots
   ) log:collectAllIn _:t .
   #
   ?roots list:length ?l .
   ?l math:greaterThan 1 .
   #
   ( "found %s root nodes" ?l ) string:format ?msg 
}
=> 
{
   x:RootNode x:FAILED ( ?msg ?roots ) 
} .

#
{
   ?x!rdf:type list:in ( x:Node x:Leaf ) .
   #
   _:t log:notIncludes 
   {
       ?x x:conclusionStr ?s 
   }
}
=> 
{
   x:conclusionStr x:FAILED ( ?x ) 
} .

#
{
   ?x a x:Node .
    
    #
   _:t log:notIncludes 
   {
       ?x x:recommContainer ?c 
   } .
}
=> 
{
   x:recommContainer x:FAILED ( ?x ) 
} .

#
{
   ?x a x:Node .
   ?x!x:evidence list:member ?e .
    
    #
   _:t log:notIncludes 
   {
       ?e x:reasonLabel ?l 
   } .
}
=> 
{
   x:reasonLabel x:FAILED ( ?x ?e ) 
} .


#
{
   ?x!rdf:type list:in ( x:Leaf x:Node ) .
    #
   _:t log:notIncludes 
   {
       ?x x:output ?o 
   }
}
=> 
{
   x:output x:FAILED ( ?x ) 
} .
