# @alsoload ../../test/contrast/yellow-inv-interm.n3

@prefix dc: <http://purl.org/dc/terms/> .
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#> .
@prefix graph: <http://www.w3.org/2000/10/swap/graph#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix n3: <http://www.w3.org/2004/06/rei#> .
@prefix pml: <http://provenanceweb.org/ns/pml#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix r: <http://www.w3.org/2000/10/swap/reason#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix x: <http://wvw.org/xai#> .
@base <http://wvw.org/xai#> .


# divide
# (all terms to be described are indicated as "x:term"s)

{
   ?cc x:expandCamelCase ?exp 
}
<= 
{
   ( ?cc "([A-Z][a-z]+)" ) string:scrapeAll ?groups .
   ( ?groups string:lowerCase ) list:map ?lcGroups .
   ( ?lcGroups " " ) string:join ?exp 
} .

# TODO narrow this down to only nodes
{
   ?x x:gives ?value . # formula
   ?x!rdf:type list:in ( x:Node r:Extraction r:Fact ) .
   ?value e:labelvars ?valuel .
   ?valuel log:includes 
   {
       ?s ?p ?o 
   } .
}
=> 
{
   ?valuel x:term ?s , ?p , ?o 
} .
{
   ?value x:term ?t .
   ?t log:rawType rdf:List .
   ?t e:labelvars ?tl .
   ?tl list:member ?m 
}
=> 
{
   ?tl x:term ?m 
} .
{
   ?value x:term ?t .
   ?t log:rawType log:Formula .
   ?t e:labelvars ?tl .
   ?tl log:includes 
   {
       ?s ?p ?o 
   } .
}
=> 
{
   ?tl x:term ?s , ?p , ?o 
} . 


# conquer
# (generate strings for every "x:term" as "x:description"s)

# atomic terms

# unlabeled URIs
{
   ?value x:term ?t .
   ?t log:rawType log:Other .
   _:x log:notIncludes 
   {
       ?t rdfs:label ?l 
   } .
   ?t log:uri ?uri .
   ( ?uri ".+(#|/)(.+)" ) string:search ( ?div ?ln ) .
   ?ln x:printLocalName ?ln2 .
   ?t log:localN3String ?ts .
}
=> 
{
   ?ts x:description ?ln2 
} .

# labeled URIs
{
   ?value x:term ?t .
   ?t log:rawType log:Other .
   ?t rdfs:label ?l .
   ?l x:printLabel ?l2 .
   ?t!e:labelvars log:localN3String ?ts .
}
=> 
{
   ?ts x:description ?l2 
} .

# literal
{
   ?value x:term ?t .
   ?t log:rawType log:Literal .
   ?t x:printLiteral ?t2 .
   ?t log:localN3String ?ts .
}
=> 
{
   ?ts x:description ?t2 
} .


# compound terms

# (collect all "x:description"s of list terms and use to describe list itself)
{
   ?value x:term ?list .
   ?list log:rawType rdf:List .
   (
       ?td
       {
           ?list list:member ?t .
           ?t!log:localN3String x:description ?td .
       }
       ?strs
   ) log:collectAllIn _:x .
   ?strs!list:length math:equalTo ?list!list:length .
   ( ?strs " " ) string:join ?str2 .
   ( "( " ?str2 " )" ) string:concatenation ?str3 .
   ?list log:localN3String ?ls 
}
=> 
{
   ?ls x:description ?str3 
} .


# (collect all "x:description"s of formula terms and use to describe formula itself)
{
   ?value x:term ?form .
   ?form log:rawType log:Formula .
   ?form x:printFormula ?str .
   #
   ?form log:localN3String ?fs 
}
=> 
{
   ?fs x:description ?str 
} .


# finalize

# (using "x:description"s of terms, generate strings for "r:gives"s)
{
   ?x!rdf:type list:in ( x:Node x:Leaf ) .
   ?x x:gives ?value .
   ?value!e:labelvars x:printFormula ?str .
}
=> 
{
   ?x x:conclusionStr ?str 
} .


# # (describe inferences in some more detail)
# {	?x a x:Node ; 
# 		r:rule ?extraction .
	
# 	?extraction x:conclusionStr ?ruleStr .
	 
# 	?extraction!r:because!r:source log:uri ?source .
	
# 	( ?assign
# 	{	?x r:binding ?binding . ?binding!r:variable n3:uri ?var . ?binding!r:boundTo n3:uri ?uri .
# 		( ?uri ".*?#(.*)" ) string:scrape ?ln . ( ":" ?ln ) string:concatenation ?ln2 .
# 		( ?var ".*#(.*)" ) string:scrape ?var2 .
# 		( "<div class='assign'><span class='var'>var:" ?var2 "</span> = <span class='val uri'>" ?ln2 "</span></div>" ) 
# 			string:concatenation ?assign .
		
# 	} ?uriAssigns) log:collectAllIn _:x .
	
# 	( ?assign
# 	{	?x r:binding ?binding . ?binding!r:variable n3:uri ?var . 
# 		?binding r:boundTo ?lit . ?lit log:rawType log:Literal . ( "\"" ?lit "\"" ) string:concatenation ?lit2 .
# 		( ?var ".*#(.*)" ) string:scrape ?var2 .
# 		( "<div class='assign'><span class='var'>var:" ?var2 "</span> = <span class='val lit'>" ?lit2 "</span></div>" ) 
# 			string:concatenation ?assign .
			
# 	} ?litAssigns) log:collectAllIn _:x .
	
# 	( ?uriAssigns ?litAssigns ) list:append ?assigns .
# 	?assigns e:sort ?assigns2 .
	
# 	?assigns2 string:concatenation ?bindingStr .
	
# } => { ?x x:ruleStr ?ruleStr ; x:sourceStr ?source ; x:bindingStr ?bindingStr } .
