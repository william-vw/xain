@prefix : <http://niche.cs.dal.ca/ns/copd.owl#>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix prov: <http://www.w3.org/ns/prov#>.
@prefix pml: <http://provenanceweb.org/ns/pml#>.
@prefix xpl: <http://niche.cs.dal.ca/xpl#>.
@prefix r: <http://www.w3.org/2000/10/swap/reason#>.
@prefix var: <http://eyereasoner.github.io/var#>.
@prefix skolem: <http://eyereasoner.github.io/.well-known/genid/1893620644282676494#>.
@prefix n3: <http://www.w3.org/2004/06/rei#>.

skolem:proof a r:Proof, r:Conjunction;
  r:component skolem:lemma1;
  r:component skolem:lemma2;
  r:gives {
    :patientA :isStratified :YellowZone.
    :patientA xsd:dueTo :hasPhlemAmount.
    :patientA xsd:dueTo :hasColoredPhlem.
  }.

skolem:lemma1 a r:Inference;
  r:gives {
    :patientA :isStratified :YellowZone.
    :patientA xsd:dueTo :hasPhlemAmount.
  };
  r:evidence (
    skolem:lemma3
    skolem:lemma3
  );
  r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://niche.cs.dal.ca/ns/copd.owl#patientA"]];
  r:rule skolem:lemma4.

skolem:lemma2 a r:Inference;
  r:gives {
    :patientA :isStratified :YellowZone.
    :patientA xsd:dueTo :hasColoredPhlem.
  };
  r:evidence (
    skolem:lemma3
    skolem:lemma5
  );
  r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://niche.cs.dal.ca/ns/copd.owl#patientA"]];
  r:rule skolem:lemma6.

skolem:lemma3 a r:Inference;
  r:gives {
    :patientA :isStratified :YellowZone.
    :patientA xsd:dueTo :hasPhlemAmount.
  };
  r:evidence (
    skolem:lemma7
  );
  r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://niche.cs.dal.ca/ns/copd.owl#patientA"]];
  r:rule skolem:lemma8.

skolem:lemma4 a r:Extraction;
  r:gives {
    @forAll var:x_0. {
        var:x_0 :isStratified :YellowZone.
        var:x_0 xsd:dueTo :hasPhlemAmount.
    } => {
        var:x_0 :isStratified :YellowZone.
        var:x_0 xsd:dueTo :hasPhlemAmount.
    }.
  };
  r:because [ a r:Parsing; r:source <file:///ruleHeads.n3>].

skolem:lemma5 a r:Inference;
  r:gives {
    :patientA :isStratified :YellowZone.
    :patientA xsd:dueTo :hasColoredPhlem.
  };
  r:evidence (
    skolem:lemma9
  );
  r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://niche.cs.dal.ca/ns/copd.owl#patientA"]];
  r:rule skolem:lemma10.

skolem:lemma6 a r:Extraction;
  r:gives {
    @forAll var:x_0. {
        var:x_0 :isStratified :YellowZone.
        var:x_0 xsd:dueTo :hasColoredPhlem.
    } => {
        var:x_0 :isStratified :YellowZone.
        var:x_0 xsd:dueTo :hasColoredPhlem.
    }.
  };
  r:because [ a r:Parsing; r:source <file:///ruleHeads.n3>].

skolem:lemma7 a r:Extraction;
  r:gives {
    :patientA :hasPhlemAmount :Moderate.
  };
  r:because [ a r:Parsing; r:source <file:///data.n3>].

skolem:lemma8 a r:Extraction;
  r:gives {
    @forAll var:x_0. {
        var:x_0 :hasPhlemAmount :Moderate.
    } => {
        var:x_0 :isStratified :YellowZone.
        var:x_0 xsd:dueTo :hasPhlemAmount.
    }.
  };
  r:because [ a r:Parsing; r:source <file:///rules.n3>].

skolem:lemma9 a r:Extraction;
  r:gives {
    :patientA :hasColoredPhlem true.
  };
  r:because [ a r:Parsing; r:source <file:///data.n3>].

skolem:lemma10 a r:Extraction;
  r:gives {
    @forAll var:x_0. {
        var:x_0 :hasColoredPhlem true.
    } => {
        var:x_0 :isStratified :YellowZone.
        var:x_0 xsd:dueTo :hasColoredPhlem.
    }.
  };
  r:because [ a r:Parsing; r:source <file:///rules.n3>].